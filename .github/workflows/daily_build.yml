name: Daily Build and Push

on:
  # schedule:
    # 每天 UTC 时间 00:00 触发
    # - cron: '0 0 * * *'
  workflow_dispatch: # 允许手动触发工作流

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    # Step 1: 检出代码
    - name: Checkout repository
      uses: actions/checkout@v3

    # Step 2: 设置 Docker Buildx
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    # Step 3: 登录 GitHub Container Registry (ghcr.io)
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }} # 使用 GitHub 用户名
        password: ${{ secrets.GITHUB_TOKEN }} # 使用 GitHub Token 进行身份验证

    # Step 4: 检查更新
    - name: Check for updates
      run: |
        git fetch origin
        git diff --quiet HEAD origin/main || echo "Updates found" > update.txt
        if [ -f update.txt ]; then echo "New updates detected!"; else echo "No updates found."; fi

    # Step 5: 如果有更新，重新编译 Docker 镜像并推送
    - name: Build and Push Docker Image
      if: success() && steps.check_for_updates.outputs.status == 'success'
      run: |
        docker build -t ghcr.io/${{ github.repository }}/your-image-name:latest .
        docker push ghcr.io/${{ github.repository }}/your-image-name:latest

    # Step 6: 可选：标签发布新的 Docker 镜像版本
    - name: Tag Docker image
      if: success() && steps.check_for_updates.outputs.status == 'success'
      run: |
        NEW_TAG=$(date +'%Y%m%d%H%M%S')
        docker tag ghcr.io/${{ github.repository }}/your-image-name:latest ghcr.io/${{ github.repository }}/your-image-name:$NEW_TAG
        docker push ghcr.io/${{ github.repository }}/your-image-name:$NEW_TAG
